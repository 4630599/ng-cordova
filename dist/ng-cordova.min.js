/*!
 * ngCordova
 * Copyright 2014 Drifty Co. http://drifty.com/
 * See LICENSE in this repository for license information
 */
(function(){
angular.module('ngCordova', [
  'ngCordova.plugins'
]);

angular.module('ngCordova.plugins.accelerometer', [])

.factory('$cordovaAccelerometer', ['$q', function($q) {

  return {
    getCurrentAcceleration: function() {
      var q = $q.defer();

      navigator.accelerometer.getCurrentAcceleration(function(result) {
        // Do any magic you need
        q.resolve(result);
      }, function(err) {
        q.reject(err);
      }, options);

      return q.promise;
    },
    watchAcceleration: function(options) {
      var q = $q.defer();

      navigator.accelerometer.watchAcceleration(function(result) {
        // Do any magic you need
        q.resolve(result);
      }, function(err) {
        q.reject(err);
      }, options);

      return q.promise;
    },
    clearWatch: function(watchID) {
      return navigator.accelerometer.clearWatch(watchID);
    }
  }
}]);

angular.module('ngCordova.plugins.camera', [])

.factory('Camera', ['$q', function($q) {

  return {
    getPicture: function(options) {
      var q = $q.defer();

      navigator.camera.getPicture(function(imageData) {
        // Do any magic you need
        q.resolve(imageData);
      }, function(err) {
        q.reject(err);
      }, options);

      return q.promise;
    },
    cleanup: function(options) {
      var q = $q.defer();
      navigator.camera.cleanup(function() {
        // Do any magic you need
        q.resolve(arguments);
      }, function(err) {
        q.reject(err);
      });

      return q.promise;
    }
    
  }
}]);

angular.module('ngCordova.plugins.compass', [])

.factory('Compass', ['$q', function($q) {

  return {
    watchHeading: function(options) {
      var q = $q.defer();

      navigator.compass.watchHeading(function(result) {
        // Do any magic you need
        q.resolve(result);
      }, function(err) {
        q.reject(err);
      }, options);

      return q.promise;
    }
  }
}]);

angular.module('ngCordova.plugins.geolocation', [])

.factory('Geolocation', ['$q', function($q) {

  return {
    getCurrentPosition: function(options) {
      var q = $q.defer();

      navigator.geolocation.getCurrentPosition(function(result) {
        // Do any magic you need
        q.resolve(result);
      }, function(err) {
        q.reject(err);
      }, options);

      return q.promise;
    },
    watchPosition: function(options) {
      var q = $q.defer();

      navigator.geolocation.watchPosition(function(result) {
        // Do any magic you need
        q.resolve(result);
      }, function(err) {
        q.reject(err);
      }, options);

      return q.promise;
    },
    clearWatch: function(watchID) {
      return navigator.geolocation.clearWatch(watchID);
    }
  }
}]);

angular.module('ngCordova.plugins', [
  'ngCordova.plugins.accelerometer',
  'ngCordova.plugins.camera',
  'ngCordova.plugins.geolocation',
  'ngCordova.plugins.compass',
  'ngCordova.plugins.notification',
  'ngCordova.plugins.vibration'
]);

angular.module('ngCordova.plugins.notification', [])

.factory('Notification', [function() {

  return {
    alert: function(message, callback, title, buttonName) {
	  return navigator.notification.alert.apply(navigator.notification, arguments);
    },
    confirm: function(message, callback, title, buttonName) {
	  return navigator.notification.confirm.apply(navigator.notification, arguments);
    },
    prompt: function((message, promptCallback, title, buttonLabels, defaultText) {
	  return navigator.notification.prompt.apply(navigator.notification, arguments);
    },
    beep: function(times) {
	  return navigator.notification.beep(times);
    }
  }
}]);

angular.module('ngCordova.plugins.vibration', [])

.factory('Vibration', [function() {

  return {
  	vibrate: function(times) {
  	  return navigator.notification.vibrate(time);
	}
  }
}]);

})();